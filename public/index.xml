<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>icck&#39;s Blog</title>
    <link>https://icck.github.io/</link>
    <description>Recent content on icck&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>js</language>
    <lastBuildDate>Thu, 26 Sep 2019 00:12:50 +0900</lastBuildDate>
    
	<atom:link href="https://icck.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[調査方法]Oracle ORA-01000 最大オープン・カーソル数を超えました。[V$OPEN_CURSOR]</title>
      <link>https://icck.github.io/posts/0012-oracle-curerror/</link>
      <pubDate>Thu, 26 Sep 2019 00:12:50 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0012-oracle-curerror/</guid>
      <description>Oracle ORA-01000 最大オープン・カーソル数を超えました。  Oracle(PLSQL)でカーソルに関するエラーが発生しハマったときの対処方法メモ 原因としてはカーソルを「オープン」と「クローズ」の数の不一致  私の場合は、オープンがループ内で行われており、クローズはループの外にあったためオープンし過ぎでエラーになりました。    調査方法 1.カーソルの最大数を確認します。  これが小さすぎるのが原因の場合はSet文でOracleの設定変更しましょう。  show parameters open_cursors; 2.カーソルの数を確認します。  私はブレークポイントデバッグを行いながらcount(1)の増加を確認しプログラムによるカーソル増加を特定しました。 自分が動作させているプログラムと確定している場合はuser_nameを条件に設定します。 具体的なプログラム名を特定するにはsidから調査します。  select sid , user_name , count(1) from V$OPEN_CURSOR group by sid, user_name having count(1) &amp;gt; 10 -- ここは最大数に応じて調整  ; さいごに  明示的にオープン、フェッチ、クローズをコードに記載すると通常処理はもちろんエラー処理での適切なクローズを求められます。 暗黙、明示どちらでもよいですが、FORループを利用してコードを記述したほうがバグのリスクを減らすことが出来るためオススメだと思っています。  </description>
    </item>
    
    <item>
      <title>WSLの設定</title>
      <link>https://icck.github.io/posts/0011-wsl/</link>
      <pubDate>Tue, 24 Sep 2019 00:01:11 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0011-wsl/</guid>
      <description>WSL(Windows Subsystem for Linux)の設定 前提  WSLが利用可能であること Ubuntu18.04  Setup # 日本からミラーするように sudo sed -i -e &amp;#39;s%http://.*.ubuntu.com%http://ftp.jaist.ac.jp/pub/Linux%g&amp;#39; /etc/apt/sources.list # アップデート sudo apt update -y &amp;amp;&amp;amp; apt upgrade -y # fish 準備 sudo apt-add-repository ppa:fish-shell/release-3 sudo apt update -y # install fish sudo apt install -y fish # change default shell .bashrc exec fish # install fisher curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs https://git.io/fisher fisher -v # add theme fisher add oh-my-fish/theme-agnoster # font powerline git clone https://github.</description>
    </item>
    
    <item>
      <title>Qiita API②いいねとVIEW数をLambdaで取得してS3へ保存</title>
      <link>https://icck.github.io/posts/0010-qiita-python/</link>
      <pubDate>Tue, 17 Sep 2019 23:00:33 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0010-qiita-python/</guid>
      <description>前回投稿した「Qiita API でいいねとVIEW数をCurlで取得する方法」を利用し、Lambdaで実行してs3にjsonファイルとして格納してみようと思います。
Code 以下のコードを実行しs3に格納していきます。※事前にバケットは作成しておきます。
import csv import json import logging import os import sys import boto3 import requests formatter = &amp;#39;%(asctime)s%(name)-12s%(levelname)-8s%(message)s&amp;#39; logging.basicConfig(level=logging.WARNING, format=formatter) logger = logging.getLogger(__name__) def get_next_url(response): link = response.headers[&amp;#39;link&amp;#39;] if link is None: return None links = link.split(&amp;#39;,&amp;#39;) for link in links: if &amp;#39;rel=&amp;#34;next&amp;#34;&amp;#39; in link: return link[link.find(&amp;#39;&amp;lt;&amp;#39;) + 1:link.find(&amp;#39;&amp;gt;&amp;#39;)] return None def get_items(token): url = &amp;#39;https://qiita.com/api/v2/authenticated_user/items&amp;#39; headers = {&amp;#39;Authorization&amp;#39;: &amp;#39;Bearer {}&amp;#39;.format(token)} items = [] while True: response = requests.</description>
    </item>
    
    <item>
      <title>Qiita API でいいねとVIEW数をCurlで取得する方法</title>
      <link>https://icck.github.io/posts/0009-qiita-curl/</link>
      <pubDate>Sun, 15 Sep 2019 13:39:55 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0009-qiita-curl/</guid>
      <description>はじめに QiitaにはAPIが用意されています。 私もQiitaに投稿しているのですが、Google Analyticsでは取得しきれない「いいね」の情報が欲しくてCurlで取得する方法を調べてみました。
APIのドキュメントは以下にあります。
https://qiita.com/api/v2/docs
APIを使うための準備 個人の情報を取得するためにはアクセストークンを発行する必要があります。
https://qiita.com/settings/tokens/new
にアクセスし、アクセストークンを発行しましょう。
発行できたら、あとはドキュメントに従ってCurlでデータを取得していきます。
QIITA_TOKEN=XXXXXXXXX # いいね、記事タイトル→CSV形式 curl -sH &amp;#34;Authorization: Bearer ${QIITA_TOKEN}&amp;#34; \  &amp;#34;https://qiita.com/api/v2/authenticated_user/items?page=1&amp;amp;per_page=100&amp;#34; \  | jq -r &amp;#39;.[] | [.likes_count, .title, .id] | @csv&amp;#39; 0,&amp;#34;Session Managerでプライベートサブネット上のEC2にSSHする方法&amp;#34;,&amp;#34;e8dc6b039ef95d7b3d72&amp;#34; 0,&amp;#34;5分でAWS Elastic Beanstalk(作って、修正して、お片付け)&amp;#34;,&amp;#34;e30d62e878b1b2c6f3d7&amp;#34; 2,&amp;#34;CodeBuildでECRビルドエラーから得た4つの知見&amp;#34;,&amp;#34;bcf118a38c2a691a837d&amp;#34; 0,&amp;#34;AWS Cloud9でAWS SAM CLI環境作成～Hello World(Python)まで&amp;#34;,&amp;#34;873721df727943beb52d&amp;#34; 3,&amp;#34;[Docker for Windows]Kubernetesを動かしてみる&amp;#34;,&amp;#34;91eac9da094666e47c62&amp;#34; 0,&amp;#34;Docker for WindowsでEnabled Kubernetesが出来なくてハマったときの解決方法&amp;#34;,&amp;#34;c40eede0bb120d643f2c&amp;#34; 1,&amp;#34;[小ネタ]fishでaws-cliの補完機能を使うための手順&amp;#34;,&amp;#34;e57a86ba65c14a7fbb19&amp;#34; 9,&amp;#34;Dockerでaws-cli環境を作ればアカウント切替が簡単に&amp;#34;,&amp;#34;40545486a342179a5bd3&amp;#34; 7,&amp;#34;Pythonista3でstashを実行しNo module named &amp;#39;urlparse&amp;#39;が出た場合の解決方法&amp;#34;,&amp;#34;a33a3b113dea0b2fa850&amp;#34; 5,&amp;#34;QiitaにGoogleAnalyticsの設定する。数字を眺めて楽しい&amp;#34;,&amp;#34;56060f8a72863ee05924&amp;#34; 3,&amp;#34;バッチファイルを経由すればPowerShellファイルの実行権限を変えずに指定権限で実行できた&amp;#34;,&amp;#34;60bc30a793a8f4ecdc2b&amp;#34; 27,&amp;#34;Docker for Windowsをインストール後 could not read CA certificateエラーが出た時の解決方法&amp;#34;,&amp;#34;60e1c1f8b6a05c8fdf72&amp;#34; 10,&amp;#34;AWS認定ソリューションアーキテクトアソシエイト合格[2018.04]&amp;#34;,&amp;#34;a1416e818135a424ad89&amp;#34; 2,&amp;#34;[AWS Cloud9]EC2自動停止を検知して別の処理を始める&amp;#34;,&amp;#34;c841fa99af2c88a6d956&amp;#34; 5,&amp;#34;AWS Cloud9でpythonライブラリを含めたLambdaのデプロイ&amp;#34;,&amp;#34;6cc042d2693b84c96905&amp;#34; 16,&amp;#34;AWS Cloud9でLambdaの作成、テスト、デプロイまでの手順まとめ&amp;#34;,&amp;#34;4c2fa4e0bd87ce214c92&amp;#34; 50,&amp;#34;AWS Cloud9を動かしてみた&amp;#34;,&amp;#34;7705ef6871e261d6535e&amp;#34; 1,&amp;#34;Win10 Creators Update後、vagrant upがエラーになったときの解決方法&amp;#34;,&amp;#34;37e3b88c657b4e4cdb51&amp;#34; 11,&amp;#34;SNSでSlack投稿&amp;#34;,&amp;#34;75f484cd3ccd944cd4c2&amp;#34; VIEW数は記事単位でしか取得できないようです。（nullが取得されてしまう） プログラムで記事をループしてVIEW数を取得する必要がありそうですね。</description>
    </item>
    
    <item>
      <title>JavaでLambdaを利用してFizzBuzzしてみた</title>
      <link>https://icck.github.io/posts/0008-fizzbuzz/</link>
      <pubDate>Fri, 06 Sep 2019 23:44:41 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0008-fizzbuzz/</guid>
      <description>FizzBuzzとは  エンジニアがテストコードでよく書くネタ。Wiki参照https://ja.wikipedia.org/wiki/Fizz_Buzz  Javaなら1行でシンプルに書ける。そうLambdaならね import java.util.stream.IntStream; public class FizzBuzz { public static void main(String[] args) { IntStream.rangeClosed(1, 100).forEach( i -&amp;gt; System.out.format(&amp;#34;%s%s%n&amp;#34;, (i%3 == 0 ? &amp;#34;Fizz&amp;#34; : &amp;#34;&amp;#34;), (i%5 == 0 ? &amp;#34;Buzz&amp;#34; : (i%3 == 0 ? &amp;#34;&amp;#34; : i)) ) ); } } </description>
    </item>
    
    <item>
      <title>AWS CodeCommitの作成、プルリクエストまでの方法</title>
      <link>https://icck.github.io/posts/0007-codecommit/</link>
      <pubDate>Fri, 06 Sep 2019 21:38:30 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0007-codecommit/</guid>
      <description>Codeシリーズはまずは使ってみる！ 概要（最低限）  ソースコードを管理するGitリポジトリサービス サードパーティ(SourceTreeなど)利用可能 プルリクエスト機能が利用可能  リポジトリの作成  リポジトリ名を入れて、作成ボタン ＞ 完成！！ はじめにマネジメントコンソールでCodeCommitを選択しリポジトリを作成します。 名前を選択するだけ、簡単ですね。   次にgitを使う端末で設定をしていきます。 今回はAWS CLIを設定していることが前提になります。  git config --global credential.helper &amp;#39;!aws --region ap-northeast-1 codecommit credential-helper $@&amp;#39; git config --global credential.UseHttpPath true git clone [URLのクローン] コミット&amp;amp;プッシュしてみる  通常のgitと同様の利用方法が使えることを確認します。  $ echo &amp;#34;hello codecommit!&amp;#34; &amp;gt; README.md $ git add -A $ git commit -m &amp;#34;add readme&amp;#34; $ git push origin master  コミットされたことを確認しました。  プルリクエストしてみる  ブランチを作成しファイルを修正、コミット%プッシュします。  (master) $ git checkout -b f1 (f1) $ echo &amp;#34;f1 add&amp;#34; &amp;gt;&amp;gt; README.</description>
    </item>
    
    <item>
      <title>fishでaws-cliの補完機能を使う</title>
      <link>https://icck.github.io/posts/0006-fish-aws-cli/</link>
      <pubDate>Mon, 02 Sep 2019 02:17:32 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0006-fish-aws-cli/</guid>
      <description>bash -&amp;gt; fishに変更した場合、aws-cliの補完機能を有効にする方法 # 位置を特定します $ which aws_completer # 存在しない場合は作成します $ vim ~/.config/fish/config.fish # aws_completerのパスはwhichで調べたパスに適時変更しconfig.fishに追記して保存します $ complete -c aws -f -a &amp;#39;(begin; set -lx COMP_SHELL fish; set -lx COMP_LINE (commandline); /usr/local/bin/aws_completer; end)&amp;#39; #確認 $ aws s + tab さいごに これで、良いfish Lifeを過ごせます。</description>
    </item>
    
    <item>
      <title>Dynamodb TTL(Time to Live、データを自動削除する機能)を使ってみた</title>
      <link>https://icck.github.io/posts/0005-dynamodb-ttl/</link>
      <pubDate>Sun, 01 Sep 2019 09:17:57 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0005-dynamodb-ttl/</guid>
      <description>TTLとは  レコード毎にデータの有効期限を指定でき、その有効期限を過ぎるとデータが自動削除される機能です  利用例  低アクセスデータをアーカイブTBLへ移動  メインTBLと同定義、キャパシティーだけ下げてOLDデータを保存   低アクセスデータを削除  削除時にトリガーして、LOGを残す   トリガーさせるにはStreamの有効化が必要  TTL詳細  TTL の有効化  カラムで指定した有効期限を過ぎると、自動でデータが消える 変更が完全に処理されるまでに最大で 1 時間かかる   TTL 属性  項目の TTL タイムスタンプを保存する DynamoDB 属性の名前   有効期限はNumber型のエポック時間(Unixtime（ミリ秒無し）)を指定  現在の時間を、項目の Time To Live 属性に保存されている時間と比較 属性に保存されているエポック時間の値が現在の時間よりも少ない場合、項目は期限切れとマークされ、その後に削除される   データは48時間以内に削除される  リアルタイム性が重要でない場合（48時間後に消えてもOKな場合）は、とても有効な機能   スループットは消費せず、データ容量が減らせる  エポック時間形式(Unixtime)  コンピューターシステム上での時刻表現の一種 UNIXエポック、すなわち協定世界時 (UTC) での1970年1月1日午前0時0分0秒から形式的な経過秒数（すなわち、実質的な経過秒数から、その間に挿入された閏秒を引き、削除された閏秒を加えたもの） 現在時刻からエポック時間を取得する方法  Linux ターミナル: date +%s Python: import time; long(time.</description>
    </item>
    
    <item>
      <title>DynamoDBでSparse Indexesを利用するテクニック</title>
      <link>https://icck.github.io/posts/2019-08-31/</link>
      <pubDate>Sat, 31 Aug 2019 23:56:43 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-31/</guid>
      <description>Sparse Indexesとは  DynamoDBのデータ抽出アプローチのテクニックの１つ 特定Itemにしか設定していない項目にGSIを含めることでプライマリーキー、ソートキー以外のキーでデータ抽出を容易に 以下の悩みを解決（プライマリーキー、ソートキー以外のキーでデータ抽出）  scanだと高コスト、キーで検索しても高コスト、フィルターだとキー検索とコスト一緒    サンプル: gameから最優秀賞を取得 初期テーブル  game単位で最優秀スコアのデータを取得したい scoreの最優秀をawdという項目を用意。対象以外は項目を設定しない   awdを含めたグローバルセカンダリインデックスを作成 GSIを検索  最優秀賞が設定されている項目が少ないため、VIEWが出来た時点で絞り込まれている scanしても低コスト！←今回の一番のポイント  aws dynamodb scan --table-name game --index-name name-awd-index { &amp;#34;Count&amp;#34;: 1, &amp;#34;Items&amp;#34;: [ { &amp;#34;score&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;3&amp;#34; }, &amp;#34;id&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;user3&amp;#34; }, &amp;#34;awd&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;cp&amp;#34; }, &amp;#34;name&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;game1&amp;#34; } } ], &amp;#34;ScannedCount&amp;#34;: 1, &amp;#34;ConsumedCapacity&amp;#34;: null } </description>
    </item>
    
    <item>
      <title>DynamoDBをaws cliで操作する</title>
      <link>https://icck.github.io/posts/2019-08-29/</link>
      <pubDate>Thu, 29 Aug 2019 23:53:34 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-29/</guid>
      <description>Create Table (sample:mails) aws dynamodb create-table --table-name mails \ --attribute-definitions \  AttributeName=id,AttributeType=S \  AttributeName=Name,AttributeType=S \ --key-schema \  AttributeName=id,KeyType=HASH \  AttributeName=Name,KeyType=RANGE \ --provisioned-throughput \  ReadCapacityUnits=2,WriteCapacityUnits=2  attribute-definitions  プライマリーキーとソートキーを定義する それ以外のキーはテーブル作成時には定義しなくても良い   key-schema  HASH  パーティションキー   RANGE  ソートキー     provisioned-throughput  ReadCapacityUnits  読み込みスループット   WriteCapacityUnits  書き込みスループット      put-item aws dynamodb put-item \  --table-name mails \  --item &amp;#39;{&amp;#34;id&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;testid1&amp;#34;},&amp;#34;Name&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;Alice&amp;#34;},&amp;#34;mail&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;alice@test.</description>
    </item>
    
    <item>
      <title>Hugoに全文検索機能を追加する</title>
      <link>https://icck.github.io/posts/2019-08-28/</link>
      <pubDate>Wed, 28 Aug 2019 21:33:54 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-28/</guid>
      <description>完成したもの まずは動いているものは以下になります。
https://icck.github.io/search/
作業手順  手順を順に記載していきます。以下の記事を参考にさせていただきました。 http://rs.luminousspice.com/hugo-site-search/ https://snap.textgh.org/post/full-text-search-in-hugo/  インデックスファイルのテンプレート $ mkdir ./layouts/js $ touch ./layouts/js/single.html var data = [{{ range $index, $page := where .Site.Pages &amp;#34;Section&amp;#34; &amp;#34;posts&amp;#34;}} {{ if ne $index 0 }},{{ end }}{ url: &amp;#34;{{ $page.Permalink }}&amp;#34;, title: &amp;#34;{{ $page.Title }}&amp;#34;, content: &amp;#34;{{ .PlainWords }}&amp;#34; }{{ end }}]  インデックスファイルを生成する空の投稿 $ hugo new pages/indexjs.md --- date: 2019-08-28T21:50:35+09:00 type: &amp;#34;js&amp;#34; url: &amp;#34;index.js&amp;#34; --- 検索ページの作成 検索ページテンプレートの作成 $ mkdir ./layouts/search/ $ touch .</description>
    </item>
    
    <item>
      <title>Hugoブログ更新方法</title>
      <link>https://icck.github.io/posts/000/</link>
      <pubDate>Mon, 26 Aug 2019 01:14:23 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/000/</guid>
      <description>Hugoの使い方を今後のブログ更新のために Hugoでブログを書いていく上で、運用方法をメモしていこうと思います。 インストール等は気が向いたときに
Local環境を起動 $ hugo server --theme=hugo-theme-nix --buildDrafts --watch 記事の作成 $ hugo new post/test.md --- title: &amp;#34;test&amp;#34; date: 2019-08-26T01:14:23+09:00 draft: true ---  title:記事のタイトルに修正 date:作成時刻のため、そのまま draft:trueが非公開。falseに変更し公開  Sample --- title: &amp;#34;test&amp;#34; date: 2019-08-26T01:14:23+09:00 draft: false --- ## ここにマークダウンで本文を記載 githubへpush ./deploy.sh </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://icck.github.io/about/</link>
      <pubDate>Mon, 02 Sep 2019 23:34:26 +0900</pubDate>
      
      <guid>https://icck.github.io/about/</guid>
      <description>About Me { &amp;quot;名前&amp;quot;: &amp;quot;Issei Komori&amp;quot;, &amp;quot;よく書くこと&amp;quot;: [ &amp;quot;AWS&amp;quot;, &amp;quot;気になったツール&amp;quot; ], &amp;quot;資格&amp;quot;: [ &amp;quot;AWS Certified Solutions Architect – Associate&amp;quot;, &amp;quot;AWS Certified Developer - Associate&amp;quot;, &amp;quot;Oracle Silver&amp;quot;, &amp;quot;Java Silver&amp;quot; ], &amp;quot;スキル&amp;quot;: [ &amp;quot;AWS&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;SQL-Oracle&amp;quot; ], &amp;quot;SNS&amp;quot;: [ &amp;quot;Github: https://twitter.com/icckx&amp;quot;, &amp;quot;Qiita: https://qiita.com/icck&amp;quot;, &amp;quot;Twitter: @icckx&amp;quot; ] } </description>
    </item>
    
    <item>
      <title>全文検索</title>
      <link>https://icck.github.io/search/</link>
      <pubDate>Wed, 28 Aug 2019 22:01:57 +0900</pubDate>
      
      <guid>https://icck.github.io/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://icck.github.io/index.js</link>
      <pubDate>Wed, 28 Aug 2019 21:50:35 +0900</pubDate>
      
      <guid>https://icck.github.io/index.js</guid>
      <description></description>
    </item>
    
  </channel>
</rss>